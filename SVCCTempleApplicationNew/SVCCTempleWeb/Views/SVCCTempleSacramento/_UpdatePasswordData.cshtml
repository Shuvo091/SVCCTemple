@model SVCCTempleWeb.Models.UpdatePasswordModel
<style>
    #EmailAddress-error, #ConfirmEmailAddress-error, #ResetPasswordKey-error, #LoginPassword-error, #ConfirmLoginPassword-error, #CaptchaAnswer-error {
        color: #ff0000;
        display: block;
        font-size: 15px;
        font-weight: bold;
    }
</style>
@Html.HiddenFor(m => m.ResetPasswordQueryString)
<div id="divUpdatePasswordScrollIntoView" style="font-weight: bold;"></div>
@if (Model != null && Model.ResponseObjectModel != null && !string.IsNullOrWhiteSpace(Model.ResponseObjectModel.ValidationSummaryMessage))
{
    <div class="row validationSummaryMessage" id="divUpdatePasswordValidationSummaryMessage" style="text-align: left;">
        @Model.ResponseObjectModel.ValidationSummaryMessage
    </div>
}
@if (!ViewData.ModelState.IsValid)
{
    <div class="row" id="divUpdatePasswordValidationSummary" style="text-align: left;">
        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors" }).ToHtmlString()))
    </div>
}
else
{
    if (Model != null && Model.ResponseObjectModel != null)
    {
        <div class="row" id="divUpdatePasswordResponseObject">
            @Html.Partial("_ResponseObject", Model.ResponseObjectModel)
        </div>
    }
}
<div class="col-md-6" style="padding-left: 18px; padding-right: 18px; text-align: left;">
    <label for="EmailAddress" style="font-weight: bold;">@Html.LabelFor(m => m.EmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.EmailAddress, null, new { @class = "form-control", style = "width: 80%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.EmailAddress, "", new { id = "EmailAddress-error" }).ToHtmlString()))

    <label for="ConfirmEmailAddress" style="font-weight: bold;">@Html.LabelFor(m => m.ConfirmEmailAddress)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.ConfirmEmailAddress, null, new { @class = "form-control", style = "width: 80%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmEmailAddress, "", new { id = "ConfirmEmailAddress-error" }).ToHtmlString()))

    <label for="ResetPasswordKey" style="font-weight: bold;">@Html.LabelFor(m => m.ResetPasswordKey)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.ResetPasswordKey, null, new { @class = "form-control", style = "width: 80%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ResetPasswordKey, "", new { id = "ResetPasswordKey-error" }).ToHtmlString()))
</div>
<div class="col-md-6" style="padding-left: 18px; padding-right: 18px; text-align: left;">
    <label for="LoginPassword" style="font-weight: bold;">@Html.LabelFor(m => m.LoginPassword)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.LoginPassword, null, new { @class = "form-control", onkeyup = "javascript: return validatePasswordStrength(this.value);", style = "width: 80%;", @type = "password" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.LoginPassword, "", new { id = "LoginPassword-error" }).ToHtmlString()))
    <div id="LoginPasswordStrengthMessage" style="color: @(Model.LoginPasswordStrengthColor); display: block; font-family: Arial; font-size: 15px; font-weight: bold;">@Model.LoginPasswordStrengthMessage</div>

    <label for="ConfirmLoginPassword" style="font-weight: bold;">@Html.LabelFor(m => m.ConfirmLoginPassword)&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.ConfirmLoginPassword, null, new { @class = "form-control", style = "width: 80%;", @type = "password" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.ConfirmLoginPassword, "", new { id = "ConfirmLoginPassword-error" }).ToHtmlString()))

    <label for="CaptchaAnswer" style="font-weight: bold;">Answer captcha question - Sum of <span style="color: #ff0000;">@Model.CaptchaNumber0</span> & <span style="color: #ff0000;">@Model.CaptchaNumber1</span>?&nbsp;<span style="color: #0000ff; font-weight: bold;">(Required)</span></label>
    @Html.TextBoxFor(m => m.CaptchaAnswer, null, new { @class = "form-control", placeholder = @Model.CaptchaNumber0 + " + " + @Model.CaptchaNumber1 + " =?", style = "width: 80%;" })
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationMessageFor(m => m.CaptchaAnswer, "", new { id = "CaptchaAnswer-error" }).ToHtmlString()))
</div>
<center>
    <button class="loginRegisterbtn" id="updatePasswordSave" onclick="javascript: return updatePasswordSave_onclick();" style="width: 639px;" type="button">U P D A T E&nbsp;&nbsp;&nbsp;&nbsp;P A S S W O R D</button>
</center>
