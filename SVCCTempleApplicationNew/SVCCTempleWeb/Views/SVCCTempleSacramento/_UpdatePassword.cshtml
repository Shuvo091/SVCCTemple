@model SVCCTempleWeb.Models.UpdatePasswordModel
<h1 style="font-weight: bold;">U P D A T E&nbsp;&nbsp;&nbsp;&nbsp;P A S S W O R D</h1>
@if (!ViewData.ModelState.IsValid)
{
    <style>
        .validation-summary-errors ul {
            -webkit-column-count: 1;
            -moz-column-count: 1;
            column-count: 1;
            font-size: 18px;
        }
    </style>
    <div id="divUpdatePasswordScrollIntoView" style="font-weight: bold;"></div>
    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "validationSummaryErrors", style = "text-align: left;" }).ToHtmlString()))
}
else
{
    <style>
        .passwordStrengthValid {
            color: #008000;
            font-weight: bold;
        }

            .passwordStrengthValid:before {
                position: relative;
                left: -35px;
                content: "✔";
            }

        /* Add a red text color and an "x" when the requirements are wrong */
        .passwordStrengthInvalid {
            color: #ff0000;
            font-weight: bold;
        }

            .passwordStrengthInvalid:before {
                position: relative;
                left: -35px;
                content: "✖";
            }
    </style>
    <div class="col-md-6">
        <ul style="font-weight: bold; text-align: left;">
            <li>
                Please enter email address, confirm email address
            </li>
            <li>
                Enter password following password rules & reenter
            </li>
            <li>
                Answer captcha question
            </li>
            <li>
                Enter password key
            </li>
            <li>
                Click <span style="color: #ff0000; font-size: 18px;">U P D A T E&nbsp;&nbsp;P A S S W O R D</span> to continue
            </li>
            <li>
                Please check your <span style="color: #ff0000; font-size: 15px;">Inbox</span> for email with further instructions
            </li>
            <li>
                If you do not see the email in your Inbox
            </li>
            <li>
                Please check <span style="color: #ff0000; font-size: 15px;">Spam / Junk folder(s)</span>
            </li>
            <li>
                If so, move the email to Inbox and mark the <span style="color: #ff0000; font-size: 15px;">SENDER SAFE</span>
            </li>
        </ul>
        <hr style="background-color: #000000; display: block; font-size: 18px; font-weight: bold; height: 1px;" />
    </div>
    <div class="col-md-6">
        <h4 style="color: #a54000; font-weight: bold; letter-spacing: 7px; text-align: left; text-transform: uppercase;">PASSWORD STRENGTH</h4>
        <ul id="passwordStrengthMessages" style="text-align: left;">
            @if (Model.PasswordStrengthMessages != null)
            {
                for (int i = 0; i < Model.PasswordStrengthMessages.Count; i++)
                {
                    <li class="passwordStrengthInvalid" id="passwordStrengthMessage@(i)" style="list-style-type: decimal;">@Model.PasswordStrengthMessages[i]</li>
                }
            }
        </ul>
        <hr style="background-color: #000000; display: block; font-size: 18px; font-weight: bold; height: 1px;" />
    </div>
    <div class="col-md-12">
        <form id="formUpdatePasswordData">
            @Html.Partial("_UpdatePasswordData", Model)
        </form>
    </div>
    <script type="text/javascript">
        document.getElementById("divUpdatePasswordScrollIntoView").scrollIntoView();
        function updatePasswordSave_onclick() {
            console.log("00000000", "updatePasswordSave_onclick");
            $("#loadingModal").modal({ backdrop: 'static', keyboard: false });
            //document.getElementById("divUpdatePasswordErrors").innerHTML = "";
            var url = "/SVCCTempleSacramento/UpdatePassword";
            var postData = $("#formUpdatePasswordData").serialize();
            $.ajax({
                url: url,
                type: "POST",
                contentType: "application/x-www-form-urlencoded; charset=UTF-8",//"application/x-www-form-urlencoded; charset=UTF-8",//"text/plain; charset=UTF-8", //false, //"application/json; charset=utf-8",
                //dataType: "html",
                data: postData,
                //async: false,
                success: function (responseData, textStatus, request) {
                    $("#loadingModal").modal('hide');
                    document.getElementById("formUpdatePasswordData").innerHTML = responseData;
                    document.getElementById("divUpdatePasswordScrollIntoView").scrollIntoView();
                },
                error: function (xhr, exception) {
                    $("#loadingModal").modal('hide');
                    document.getElementById("formUpdatePasswordData").innerHTML = xhr.responseText;
                    document.getElementById("divUpdatePasswordScrollIntoView").scrollIntoView();
                }
            });
        }
        function showHideForShow(inputElementId, typeAttributeValue) {
            //Change the attribute to text
            $("#" + inputElementId).attr('type', typeAttributeValue);
            $('.icon').removeClass('fa fa-eye-slash').addClass('fa fa-eye');
        }
        function showHideForHide(inputElementId, typeAttributeValue) {
            //Change the attribute back to password
            $('#' + inputElementId).attr('type', typeAttributeValue);
            $('.icon').removeClass('fa fa-eye').addClass('fa fa-eye-slash');
        }
        function validatePasswordStrength(password) {
            var i, j;
            for (i = 0; ; i++) {
                try {
                    document.getElementById("passwordStrengthMessage" + i).classList.add("passwordStrengthInvalid");
                }
                catch (err) {
                    break;
                }
            }
            // Do not show anything when the length of password is zero.
            if (password.length === 0) {
                document.getElementById("LoginPasswordStrengthMessage").innerHTML = "";
                for (i = 0; i < 5; i++) {
                    document.getElementById("passwordStrengthMessage" + i).classList.remove("passwordStrengthValid");
                    document.getElementById("passwordStrengthMessage" + i).classList.add("passwordStrengthInvalid");
                }
                return;
            }
            // Create an array and push all possible values that you want in password
            var matchedCase = new Array();
            matchedCase.push("!#$%^&*()"); // Special Charector
            matchedCase.push("[A-Z]");     // Uppercase Alpabates
            matchedCase.push("[0-9]");     // Numbers
            matchedCase.push("[a-z]");     // Lowercase Alphabates
            var matchedCounter = new Array();
            // Check the conditions
            if (password.length >= 9) {
                matchedCounter.push(true);
                document.getElementById("passwordStrengthMessage0").classList.remove("passwordStrengthInvalid");
                document.getElementById("passwordStrengthMessage0").classList.add("passwordStrengthValid");
            }
            for (i = 0; i < password.length; i++) {
                for (j = 0; j < matchedCase[0].length; j++) {
                    if (password.substr(i, 1) == matchedCase[0].substr(j, 1)) {
                        matchedCounter.push(true);
                        document.getElementById("passwordStrengthMessage4").classList.remove("passwordStrengthInvalid");
                        document.getElementById("passwordStrengthMessage4").classList.add("passwordStrengthValid");
                        break;
                    }
                }
            }
            if (new RegExp(matchedCase[1]).test(password)) {
                matchedCounter.push(true);
                document.getElementById("passwordStrengthMessage1").classList.remove("passwordStrengthInvalid");
                document.getElementById("passwordStrengthMessage1").classList.add("passwordStrengthValid");
            }
            if (new RegExp(matchedCase[2]).test(password)) {
                matchedCounter.push(true);
                document.getElementById("passwordStrengthMessage3").classList.remove("passwordStrengthInvalid");
                document.getElementById("passwordStrengthMessage3").classList.add("passwordStrengthValid");
            }
            if (new RegExp(matchedCase[3]).test(password)) {
                matchedCounter.push(true);
                document.getElementById("passwordStrengthMessage2").classList.remove("passwordStrengthInvalid");
                document.getElementById("passwordStrengthMessage2").classList.add("passwordStrengthValid");
            }
            var ctr = matchedCounter.length;
            var color = "";
            var strength = "";
            console.log(password, matchedCounter, ctr);
            switch (ctr) {
                case 0:
                case 1:
                case 2:
                    strength = "Very Weak";
                    color = "red";
                    break;
                case 3:
                    strength = "Medium";
                    color = "orange";
                    break;
                case 4:
                    strength = "Strong";
                    color = "navy";
                    break;
                case 5:
                default:
                    strength = "Excellent";
                    color = "green";
                    break;
            }
            document.getElementById("LoginPasswordStrengthMessage").innerHTML = strength;
            document.getElementById("LoginPasswordStrengthMessage").style.color = color;
        }
    </script>
}
